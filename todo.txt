:: Research Progress ::
- produced a visual DAG for BoGL specifically, but for a simpler version of BoGL
- produce a general description of a CFG to represent language dependencies (derived from the grammar)
- updated with notes from last meeting
- should be developing this DAG approach for one or more toy languages
    - abstract graph away from JUST BoGL
    - Arithmetic toy language
- Usage dependencies
    - Program can be considered a syntactic rep of a given language, w/ bound names
    - For every name bound in the program, the type of the binding is a language dependency (NT)
        - This falls in line with the Grammar idea, Terminals are dependent on Nonterminals (Ts are bindings, NTs are types, types are eventually bound into a terminal value)
    - For every unique name used, but not bound in the program, this qualifies as a usage dependency
- goal: produce a method for grading program examples with respect to dependencies in language (syntax) and usage (bound names)
    - grading is subjective, but, given a collection of examples (a curriculum) we could practically determine whether or not they are progressing too fast, too slow, or just right (in regards to introduction of novel syntax and names)
(5/3/2020)
- each kind of dependency should be obtained from a general set of principles
    - usage deps simply based on use of defined names (types,vals, funcs)
        - existing analysis
    - language deps come from syntax (language definitions)
        - lang deps are relationships between nonterminals derived in grammar productions
        - lexical primitives (integers, terminals), not defined in the grammar itself
- enrich symbols (provide explanations...context)
    - something of that...

:: may 10th, 2020 ::

- for any rule, LHS must be a symbol as well
- quickly add some code that determines NTs and Ts in our language purely by whether they are present in any LHS or not
  - lower case Ts, upper case NTs on print
- extend Symbol with Def (bind) & Use (call) parts, in addition to what we already have
  - both are akin to Terminal 'T', but allow easier usage dep identification
  - plug this into the arithmetic grammar
  - should allow checking of usage deps now
- Use SymbolType, check email
  - converts them all to NonTerm or Term when doing basic analysis
- plug this into the arithmetic lang
- write a simple version of it Arithmetic Lang using this

- write analyzer in Dependencies.hs
