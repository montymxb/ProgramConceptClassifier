digraph G {
Exclaim [label="!"];
Modd [label="%"];
And [label="&"];
OParen [label="("];
CParen [label=")"];
Timess [label="*"];
Pluss [label="+"];
Minuss [label="-"];
MinussGt [label="->"];
Divi [label="/"];
Colon [label=":"];
Equal [label="="];
Array [label="Array"];
Board [label="Board"];
Bool [label="Bool"];
GameName [label="GameName"];
Input [label="Input"];
Int [label="Int"];
Lowercase_Word [label="Lowercase_Word"];
Name [label="Name"];
Player [label="Player"];
TypeName [label="TypeName"];
Uppercase_Word [label="Uppercase_Word"];
game [label="game"];
lineMinussbreak [label="line-break"];
of [label="of"];
type [label="type"];
OCurly [label="{"];
CCurly [label="}"];
ArrayDecl [label="ArrayDecl"];
BinOp [label="BinOp"];
BoardDef [label="BoardDef"];
BoardEq [label="BoardEq"];
Body [label="Body"];
Decl [label="Decl"];
Expression [label="Expression"];
FuncEq [label="FuncEq"];
GameDecl [label="GameDecl"];
InputDef [label="InputDef"];
Parameters [label="Parameters"];
Position [label="Position"];
Program [label="Program"];
Set_of_Symbols [label="Set_of_Symbols"];
Symbol [label="Symbol"];
Tuple [label="Tuple"];
Type [label="Type"];
TypeSyn [label="TypeSyn"];
VarEq [label="VarEq"];
ifMinussthenMinusselse [label="if-then-else"];
letMinussin [label="let-in"];
whileMinussdo [label="while-do"];
Name -> Lowercase_Word;
TypeName -> Board;
TypeName -> Bool;
TypeName -> Int;
TypeName -> Player;
TypeName -> Uppercase_Word;
ArrayDecl -> Array;
ArrayDecl -> of;
ArrayDecl -> Position;
ArrayDecl -> Type;
BinOp -> Modd;
BinOp -> Timess;
BinOp -> Pluss;
BinOp -> Minuss;
BinOp -> Divi;
BoardDef -> Equal;
BoardDef -> Board;
BoardDef -> lineMinussbreak;
BoardDef -> type;
BoardDef -> ArrayDecl;
BoardEq -> Exclaim;
BoardEq -> Equal;
BoardEq -> Name;
BoardEq -> Expression;
BoardEq -> Position;
Body -> lineMinussbreak;
Body -> BoardDef;
Body -> Decl;
Body -> Expression;
Body -> InputDef;
Body -> TypeSyn;
Decl -> MinussGt;
Decl -> Colon;
Decl -> Board;
Decl -> Name;
Decl -> lineMinussbreak;
Decl -> BoardEq;
Decl -> FuncEq;
Decl -> Type;
Decl -> TypeSyn;
Decl -> VarEq;
Expression -> Exclaim;
Expression -> OParen;
Expression -> CParen;
Expression -> Board;
Expression -> Bool;
Expression -> Int;
Expression -> Name;
Expression -> BinOp;
Expression -> Position;
Expression -> Symbol;
Expression -> ifMinussthenMinusselse;
Expression -> letMinussin;
Expression -> whileMinussdo;
FuncEq -> Equal;
FuncEq -> Name;
FuncEq -> Expression;
FuncEq -> Parameters;
GameDecl -> GameName;
GameDecl -> game;
GameDecl -> lineMinussbreak;
GameDecl -> Body;
InputDef -> Equal;
InputDef -> Input;
InputDef -> type;
InputDef -> Type;
Parameters -> OParen;
Parameters -> CParen;
Parameters -> Name;
Position -> OParen;
Position -> CParen;
Position -> Int;
Program -> GameDecl;
Set_of_Symbols -> OCurly;
Set_of_Symbols -> CCurly;
Set_of_Symbols -> Symbol;
Symbol -> Uppercase_Word;
Tuple -> OParen;
Tuple -> CParen;
Type -> And;
Type -> Board;
Type -> Bool;
Type -> Int;
Type -> TypeName;
Type -> Set_of_Symbols;
Type -> Tuple;
TypeSyn -> Equal;
TypeSyn -> TypeName;
TypeSyn -> lineMinussbreak;
TypeSyn -> type;
TypeSyn -> Type;
VarEq -> Equal;
VarEq -> Name;
VarEq -> Expression;

}